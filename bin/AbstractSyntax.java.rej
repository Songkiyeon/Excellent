diff a/src/AbstractSyntax.java b/src/AbstractSyntax.java	(rejected hunks)
@@ -1,79 +1,385 @@
 import java.util.*;
 
 class Program {
-	Declarations decpart;
-	Block body;
-	int Layer;
-	int currentLayer;
-
-	Program(Declarations d, Block b) {
-		decpart = d;
-		body = b;
-	}
-
-	void display() {
-		System.out.println("int main() {");
-		decpart.display();
-		body.display();
-		System.out.println("}");
-	}
+    Declarations decpart;
+    Block body;
+    int Layer;
+    int currentLayer;
+//    node Temp_node;
+//    tree T;
+    
+    Program (Declarations d, Block b) {
+        decpart = d;
+        body = b;
+    }
+    void display() {
+    	for(int i=0; i<decpart.size();i++) {
+    		System.out.println(decpart.get(i));
+    	}
+    	for(int j=0; j<body.members.size();j++) {
+    		System.out.println(body.members.get(j));
+    	}
+    }
+//    void Check_addNode(int l,node s) {
+//    	if (l>Layer) {
+//    		T.add(new nodeLayer());
+//    		Layer++;
+//    	} 
+//    	T.get(l).addNode(s);
+//    }
+//    void display() {
+//    	Layer =-1;
+//    	currentLayer = 0;
+//    	T = new tree();
+//    	node n = new node("Program");
+//    	Temp_node = n; 
+//    	Check_addNode(currentLayer,n);
+//    	currentLayer++;
+//
+//    	Print_Decls(decpart);
+//    	Print_Block(body);
+//    	System.out.println("==========Abstract Syntax tree============");
+//    	System.out.println(T.get(0).nodelist.get(0).s+"(root)\n");
+//    	for(int i=1;i<=Layer;i++) {
+//    		for(int j=0;j<T.get(i).nodelist.size();j++) {
+//    			System.out.print(T.get(i).nodelist.get(j).Print_node(T, i, j, Layer));
+//    		}
+//    		System.out.println("\n");
+//    	}
+//    	
+//    }
+//    void Print_Decls(Declarations ds) {
+//    	node n = new node("Decls");
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//    	Check_addNode(currentLayer++,n);
+//    	
+//    	Temp_node=n;
+//    	for(int i=0;i<ds.size();i++) {
+//    		Print_Declaration(ds.get(i));
+//    	}
+//    	currentLayer--;
+//    	Temp_node = Temp_node.parent;
+//    }
+//    void Print_Declaration(Declaration De) {
+//    	node n = new node("Decl");
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//    	
+//    	Check_addNode(currentLayer++,n);
+//    	
+//    	Temp_node=n;
+//    	node tn = new node(De.t.toString());
+//    	tn.setParent(Temp_node);
+//    	Temp_node.addChild(tn);
+//    	
+//    	Check_addNode(currentLayer,tn);
+//    	for(int i=0;i<De.v.size();i++) {
+//    		node vn = new node(De.v.get(i).toString());
+//    		vn.setParent(Temp_node);
+//    		Temp_node.addChild(vn);
+//    		Check_addNode(currentLayer,vn);
+//    	}
+//    	currentLayer--;
+//    	Temp_node = Temp_node.parent;
+//    }
+//    void Print_Block(Statement B) {
+//    	if (B.getClass().getName()=="Block") {
+//
+//        	node n = new node("Block");
+//        	n.setParent(Temp_node);
+//        	Temp_node.addChild(n);
+//    		
+//    		Check_addNode(currentLayer++,n);
+//    		Temp_node = n;
+//    		for(int i=0;i<((Block)B).members.size();i++) {
+//    			Print_Block(((Block)B).members.get(i));
+//    		}
+//    		currentLayer--;
+//    		Temp_node = Temp_node.parent;
+//    	} else {
+//    		if(B.getClass().getName()=="Assignment") {
+//    			Print_Assignment((Assignment)B);		
+//    		} else if(B.getClass().getName()=="Loop") {
+//    			Print_Loop(((Loop)B));
+//    		} else if(B.getClass().getName()=="Skip") {    			
+//    		} 
+//    		else if(B.getClass().getName()=="Conditional") {
+//	    		Print_Conditional((Conditional)B);
+//    		} 
+//    		
+//    	}
+//    }
+//    void Print_Conditional(Conditional C) {
+//    	node n = new node("if");
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//
+//    	Check_addNode(currentLayer++, n);
+//    	Temp_node = n;
+//    	
+//		Print_Expression(C.test);
+//		Print_Block(C.thenbranch);
+//		if(C.elsebranch.getClass().getName()!="Skip") { 
+//			Print_Block(C.elsebranch);		
+//		}
+//		currentLayer--;
+//		Temp_node = Temp_node.parent;
+//    }
+//    void Print_Loop(Loop L) {
+//    	node n = new node("while");
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//
+//    	Check_addNode(currentLayer++,n);
+//    	Temp_node = n;
+//    	
+//    	Print_Expression(L.test);
+//    	Print_Block(L.body);
+//    	currentLayer--;
+//    	Temp_node = Temp_node.parent;
+//    }
+//    void Print_Assignment(Assignment As) {
+//
+//    	node n = new node("=");
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//    	
+//		Check_addNode(currentLayer++,n);		
+//		Temp_node = n;
+//		
+//		Print_Expression(As.target);
+//		Print_Expression(As.source);
+//		currentLayer--;
+//		Temp_node = Temp_node.parent;
+//    }
+//    void Print_Expression(Expression Ex) {
+//    	if(Ex.getClass().getName()=="Variable") {
+//    		Print_Variable((Variable)Ex);
+//    	} else if(Ex.getClass().getName()=="Value") {
+//    	} else if(Ex.getClass().getName()=="Binary") {
+//    		Print_Binary((Binary)Ex);
+//    	} else if(Ex.getClass().getName()=="Unary") {
+//    		Print_Unary((Unary)Ex);
+//    	} else if(Ex.getClass().getName()=="IntValue") {
+//    		Print_IntValue((IntValue)Ex);
+//    	} else if(Ex.getClass().getName()=="FloatValue") {
+//    		Print_FloatValue((FloatValue)Ex);
+//    	} else if(Ex.getClass().getName()=="CharValue") {    		
+//    		Print_CharValue((CharValue)Ex);
+//    	} else if(Ex.getClass().getName()=="BoolValue") {
+//    		Print_BoolValue((BoolValue)Ex);
+//    	}
+//    	
+//    	else {
+//    	}
+//    }
+//    void Print_IntValue(IntValue Iv) {
+//    	node n = new node(Iv.toString());
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//
+//		Check_addNode(currentLayer,n);
+//    }
+//    void Print_FloatValue(FloatValue Iv) {
+//    	node n = new node(Iv.toString());
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//    	
+//    	Check_addNode(currentLayer,n);
+//    }
+//    void Print_CharValue(CharValue Iv) {
+//    	node n = new node(Iv.toString());
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//
+//    	Check_addNode(currentLayer,n);
+//    }
+//    void Print_BoolValue(BoolValue Iv) {
+//    	node n = new node(Iv.toString());
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//
+//    	Check_addNode(currentLayer,n);
+//    }
+//    void Print_Variable(Variable V) {
+//    	node n = new node(V.toString());
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//
+//    	Check_addNode(currentLayer,n);
+//    }
+//    void Print_Binary(Binary Bi) {
+//    	node n = new node(Bi.op.toString());
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//
+//		Check_addNode(currentLayer++,n);
+//		Temp_node = n;
+//    	Print_Expression(Bi.term1);
+//    	Print_Expression(Bi.term2);
+//    	currentLayer--;
+//    	Temp_node = Temp_node.parent;
+//    }
+//    void Print_Unary(Unary Ui) {
+//    	node n = new node(Ui.op.toString());
+//    	n.setParent(Temp_node);
+//    	Temp_node.addChild(n);
+//		Check_addNode(currentLayer++,n);
+//		Temp_node = n;
+//    	Print_Expression(Ui.term);
+//    	currentLayer--;
+//    	Temp_node = Temp_node.parent;
+//    }
 }
-
+//class tree extends ArrayList<nodeLayer>{
+//	
+//}
+//class nodeLayer{
+//	ArrayList<node> nodelist = new ArrayList<node>();
+//	void addNode(node s) {
+//		nodelist.add(s);
+//	}
+//}
+//class node{
+//	String s;
+//	node parent = null;
+//	ArrayList<node> child = new ArrayList<node>();
+//	int location = 0;
+//	node(String str){
+//		s = str;
+//	}
+//	void setParent(node p) {
+//		parent = p;
+//	}
+//	void addChild(node c) {
+//		child.add(c);
+//	}
+//	String Print_node(tree t,int i, int j, int depth) {
+//		String tabs = "";
+//		if(j==0) {
+//			for(int k=0;k<t.get(i).nodelist.get(j).parent.location;k++) {
+//				tabs += "\t";
+//			}
+//			t.get(i).nodelist.get(j).location=t.get(i).nodelist.get(j).parent.location;
+//			return tabs+t.get(i).nodelist.get(j).s;
+//		} else {
+//			
+//			node le = sameParent_Left(t,i,j-1,depth);
+//			node ri = sameParent_Right(t,i,j-1,depth);
+//
+//			int alpha = t.get(i).nodelist.get(j).parent.location - ri.location;
+//			if(alpha<0)alpha=0;
+//
+//			int interval=0;
+//			for(int z=le.parent.child.indexOf(le)+1;z<le.parent.child.indexOf(ri);z++) {
+//				interval += NodeWidth(le.parent.child.get(z));
+//			}
+//			for(int k=0;
+//					k<NodeWidth(le)
+//					+alpha
+//					+interval
+//					- (t.get(i).nodelist.get(j-1).location-le.location);
+//					k++) {
+//				tabs += "\t";				
+//			}
+//			
+//			t.get(i).nodelist.get(j).location += le.location 
+//												+ NodeWidth(le)
+//												+ alpha
+//												+ interval;
+//			return tabs+t.get(i).nodelist.get(j).s;			
+//		}
+//	}
+//	node sameParent_Left(tree t, int i, int j, int depth) {
+//		node left_node = t.get(i).nodelist.get(j);
+//		node right_node = t.get(i).nodelist.get(j+1);
+//		node Temp_node = t.get(i).nodelist.get(j);
+//		
+//		left_node = t.get(i).nodelist.get(j).parent;
+//		right_node = t.get(i).nodelist.get(j+1).parent;
+//		while (!(left_node==right_node)) {
+//			Temp_node = left_node;
+//			left_node = left_node.parent;
+//			right_node = right_node.parent;			
+//		}
+//				
+//		return Temp_node;		
+//	}
+//	node sameParent_Right(tree t, int i, int j, int depth) {
+//		node left_node = t.get(i).nodelist.get(j);
+//		node right_node = t.get(i).nodelist.get(j+1);
+//		node Temp_node = t.get(i).nodelist.get(j);
+//		
+//		left_node = t.get(i).nodelist.get(j).parent;
+//		right_node = t.get(i).nodelist.get(j+1).parent;
+//		while (!(left_node==right_node)) {
+//			Temp_node = right_node;
+//			left_node = left_node.parent;
+//			right_node = right_node.parent;			
+//		}
+//		return Temp_node;		
+//	}
+//	int NodeWidth(node n) {
+//		int sum =0;
+//		for(int i=0;i<n.child.size();i++) {
+//			sum += NodeWidth(n.child.get(i));
+//		}
+//		
+//		if(sum==0) return 1;
+//		return sum;
+//	}
+//}
 class Declarations extends ArrayList<declare> {
-	public void display() {
-		for (int i = 0; i < this.size(); i++)
-			this.get(i).display();
-	}
 }
 
-abstract class declare {
-	public void display() {
-	}
+abstract class declare{
+	
 }
 
-class Declaration extends declare {
+class Declaration extends declare{
+//	ArrayList<Variable> v = new ArrayList<Variable>();
+//    Type t;
 	String name;
 	int color;
-	String value;
-
-	Declaration(String name, int type, String value) {
-		this.name = name;
-		this.color = type;
-		this.value = value;
-	}
-
-	public void setValue(String value) {
-		this.value = value;
-	}
-
-	public void display() {
-		System.out.println(color + " " + name + " = " + value);
-	}
+    String value;
+
+//    Declaration (Variable var, Type type, String value) {
+//        this.v.add(var); this.t = type; this.value = value;
+//    }
+    Declaration (String name, int type, String value) {
+        this.name = name; 
+        this.color = type; 
+        this.value = value;
+    }
+//    public void addValue(Variable var) {
+//    	v.add(var);
+//    }
+    public void setValue(String value) {
+    	this.value=value;
+    }
 }
-
 class DefineColor extends declare {
 	int color;
 	String Type;
-
-	DefineColor(int color, String Type) {
+	DefineColor(int color, String Type){
 		this.color = color;
 		this.Type = Type;
 	}
 }
-
-class Array extends declare {
+class Array extends declare{
+//	Type type;
 	String name;
 	int color;
-
 	int x, y;
-	ArrayList<ArrayList<String>> matrix = new ArrayList<ArrayList<String>>();
+	ArrayList<ArrayList<String>> matrix = new ArrayList<ArrayList<String>>();	
 
-	Array(int y, int x, int color, String name) {
+	Array(int y, int x, int color, String name){
 		this.y = y;
 		this.x = x;
-		for (int i = 0; i < y; i++) {
+		for(int i=0; i<y;i++) {
 			ArrayList<String> row = new ArrayList<String>();
-			for (int j = 0; j < x; j++) {
+			for(int j=0; j<x; j++) {
 				row.add("null");
 			}
 			matrix.add(row);
